// Code generated by MockGen. DO NOT EDIT.
// Source: gen/todo_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=gen/todo_grpc.pb.go -destination=mocks/todo_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gen "github.com/greatliontech/protoc-gen-rtk-query/example/service/gen"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockTodoServiceClient is a mock of TodoServiceClient interface.
type MockTodoServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTodoServiceClientMockRecorder
}

// MockTodoServiceClientMockRecorder is the mock recorder for MockTodoServiceClient.
type MockTodoServiceClientMockRecorder struct {
	mock *MockTodoServiceClient
}

// NewMockTodoServiceClient creates a new mock instance.
func NewMockTodoServiceClient(ctrl *gomock.Controller) *MockTodoServiceClient {
	mock := &MockTodoServiceClient{ctrl: ctrl}
	mock.recorder = &MockTodoServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoServiceClient) EXPECT() *MockTodoServiceClientMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockTodoServiceClient) CreateTodo(ctx context.Context, in *gen.Todo, opts ...grpc.CallOption) (*gen.Todo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTodo", varargs...)
	ret0, _ := ret[0].(*gen.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockTodoServiceClientMockRecorder) CreateTodo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockTodoServiceClient)(nil).CreateTodo), varargs...)
}

// DeleteTodo mocks base method.
func (m *MockTodoServiceClient) DeleteTodo(ctx context.Context, in *gen.TodoId, opts ...grpc.CallOption) (*gen.TodoId, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTodo", varargs...)
	ret0, _ := ret[0].(*gen.TodoId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoServiceClientMockRecorder) DeleteTodo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoServiceClient)(nil).DeleteTodo), varargs...)
}

// GetTodo mocks base method.
func (m *MockTodoServiceClient) GetTodo(ctx context.Context, in *gen.TodoId, opts ...grpc.CallOption) (*gen.Todo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTodo", varargs...)
	ret0, _ := ret[0].(*gen.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockTodoServiceClientMockRecorder) GetTodo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockTodoServiceClient)(nil).GetTodo), varargs...)
}

// ListTodos mocks base method.
func (m *MockTodoServiceClient) ListTodos(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*gen.Todos, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTodos", varargs...)
	ret0, _ := ret[0].(*gen.Todos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTodos indicates an expected call of ListTodos.
func (mr *MockTodoServiceClientMockRecorder) ListTodos(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTodos", reflect.TypeOf((*MockTodoServiceClient)(nil).ListTodos), varargs...)
}

// UpdateTodo mocks base method.
func (m *MockTodoServiceClient) UpdateTodo(ctx context.Context, in *gen.UpdateTodoRequest, opts ...grpc.CallOption) (*gen.Todo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTodo", varargs...)
	ret0, _ := ret[0].(*gen.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockTodoServiceClientMockRecorder) UpdateTodo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockTodoServiceClient)(nil).UpdateTodo), varargs...)
}

// MockTodoServiceServer is a mock of TodoServiceServer interface.
type MockTodoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTodoServiceServerMockRecorder
}

// MockTodoServiceServerMockRecorder is the mock recorder for MockTodoServiceServer.
type MockTodoServiceServerMockRecorder struct {
	mock *MockTodoServiceServer
}

// NewMockTodoServiceServer creates a new mock instance.
func NewMockTodoServiceServer(ctrl *gomock.Controller) *MockTodoServiceServer {
	mock := &MockTodoServiceServer{ctrl: ctrl}
	mock.recorder = &MockTodoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoServiceServer) EXPECT() *MockTodoServiceServerMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockTodoServiceServer) CreateTodo(arg0 context.Context, arg1 *gen.Todo) (*gen.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", arg0, arg1)
	ret0, _ := ret[0].(*gen.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockTodoServiceServerMockRecorder) CreateTodo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockTodoServiceServer)(nil).CreateTodo), arg0, arg1)
}

// DeleteTodo mocks base method.
func (m *MockTodoServiceServer) DeleteTodo(arg0 context.Context, arg1 *gen.TodoId) (*gen.TodoId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", arg0, arg1)
	ret0, _ := ret[0].(*gen.TodoId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoServiceServerMockRecorder) DeleteTodo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoServiceServer)(nil).DeleteTodo), arg0, arg1)
}

// GetTodo mocks base method.
func (m *MockTodoServiceServer) GetTodo(arg0 context.Context, arg1 *gen.TodoId) (*gen.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodo", arg0, arg1)
	ret0, _ := ret[0].(*gen.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockTodoServiceServerMockRecorder) GetTodo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockTodoServiceServer)(nil).GetTodo), arg0, arg1)
}

// ListTodos mocks base method.
func (m *MockTodoServiceServer) ListTodos(arg0 context.Context, arg1 *emptypb.Empty) (*gen.Todos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTodos", arg0, arg1)
	ret0, _ := ret[0].(*gen.Todos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTodos indicates an expected call of ListTodos.
func (mr *MockTodoServiceServerMockRecorder) ListTodos(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTodos", reflect.TypeOf((*MockTodoServiceServer)(nil).ListTodos), arg0, arg1)
}

// UpdateTodo mocks base method.
func (m *MockTodoServiceServer) UpdateTodo(arg0 context.Context, arg1 *gen.UpdateTodoRequest) (*gen.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", arg0, arg1)
	ret0, _ := ret[0].(*gen.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockTodoServiceServerMockRecorder) UpdateTodo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockTodoServiceServer)(nil).UpdateTodo), arg0, arg1)
}

// mustEmbedUnimplementedTodoServiceServer mocks base method.
func (m *MockTodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTodoServiceServer")
}

// mustEmbedUnimplementedTodoServiceServer indicates an expected call of mustEmbedUnimplementedTodoServiceServer.
func (mr *MockTodoServiceServerMockRecorder) mustEmbedUnimplementedTodoServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTodoServiceServer", reflect.TypeOf((*MockTodoServiceServer)(nil).mustEmbedUnimplementedTodoServiceServer))
}

// MockUnsafeTodoServiceServer is a mock of UnsafeTodoServiceServer interface.
type MockUnsafeTodoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTodoServiceServerMockRecorder
}

// MockUnsafeTodoServiceServerMockRecorder is the mock recorder for MockUnsafeTodoServiceServer.
type MockUnsafeTodoServiceServerMockRecorder struct {
	mock *MockUnsafeTodoServiceServer
}

// NewMockUnsafeTodoServiceServer creates a new mock instance.
func NewMockUnsafeTodoServiceServer(ctrl *gomock.Controller) *MockUnsafeTodoServiceServer {
	mock := &MockUnsafeTodoServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTodoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTodoServiceServer) EXPECT() *MockUnsafeTodoServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTodoServiceServer mocks base method.
func (m *MockUnsafeTodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTodoServiceServer")
}

// mustEmbedUnimplementedTodoServiceServer indicates an expected call of mustEmbedUnimplementedTodoServiceServer.
func (mr *MockUnsafeTodoServiceServerMockRecorder) mustEmbedUnimplementedTodoServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTodoServiceServer", reflect.TypeOf((*MockUnsafeTodoServiceServer)(nil).mustEmbedUnimplementedTodoServiceServer))
}
