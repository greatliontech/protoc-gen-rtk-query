package module

import (
	"text/template"

	"github.com/lyft/protoc-gen-star"
	"github.com/lyft/protoc-gen-star/lang/go"
	gopherluapb "github.com/thegrumpylion/protoc-gen-gopherlua/proto/gopherlua"
)

type Module struct {
	*pgs.ModuleBase
	ctx pgsgo.Context
}

func GopherLua() pgs.Module { return &Module{ModuleBase: &pgs.ModuleBase{}} }

func (m *Module) InitContext(ctx pgs.BuildContext) {
	m.ModuleBase.InitContext(ctx)
	m.ctx = pgsgo.InitContext(ctx.Parameters())
}

func (m *Module) Name() string { return "gopherlua" }

func (m *Module) Execute(targets map[string]pgs.File, pkgs map[string]pgs.Package) []pgs.Artifact {

	tpl := template.New("")

	tpl.Funcs(map[string]interface{}{
		"pkg":    m.ctx.PackageName,
		"server": m.ctx.ServerName,
		"rules": func(f pgs.Field) string {
			var rules gopherluapb.FieldRules
			ok, err := f.Extension(gopherluapb.E_Rules, &rules)
			if err != nil {
				return err.Error()
			}
			if ok {
				return "labelsz: " + *rules.Label
			}
			return "nope"
		},
		"theflags": func(m pgs.Method) string {
			var tf string
			ok, err := m.Extension(gopherluapb.E_Theflags, &tf)
			if err != nil {
				return err.Error()
			}
			if ok {
				return "theflags: " + tf
			}
			return "nope"
		},
		"svcc": func(m pgs.Service) string {
			var tf string
			ok, err := m.Extension(gopherluapb.E_Svcc, &tf)
			if err != nil {
				return err.Error()
			}
			if ok {
				return "svcc: " + tf
			}
			return "nope"
		},
	})

	template.Must(tpl.Parse(fileTpl))

	for _, f := range targets {
		m.Push(f.Name().String())
		out := m.ctx.OutputPath(f)
		out = out.SetExt(".lua.go")
		m.AddGeneratorTemplateFile(out.String(), tpl, f)
		m.Pop()
	}

	return m.Artifacts()
}

var _ pgs.Module = (*Module)(nil)

const fileTpl = `// Code generated by protoc-gen-gopherlua. DO NOT EDIT.
// source: {{ .InputPath }}

package {{ pkg . }}

// asadfasdfasdq 

// -- Messages -- 

{{ range .AllMessages }}
	// {{ .Name }}
{{ range .Fields }}
// {{.Name}}
// {{ rules .}}
{{ end }}
{{ end }}

// -- Services -- 

{{ range .Services }}
	// {{ .Name }}
  // {{ server . }}
  // {{ svcc . }}
{{ range .Methods }}
// {{theflags .}}
{{ end }}
{{ end }}

`
